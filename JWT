// DonorController.java
@RestController
@RequestMapping("/api/donors")
public class DonorController {
    @Autowired
    private DonorService donorService;

    @PostMapping
    public ResponseEntity<String> registerDonor(@RequestBody Donor donor) {
        donorService.registerDonor(donor);
        return ResponseEntity.ok("Donor registered successfully.");
    }

    @GetMapping
    public ResponseEntity<List<Donor>> searchDonors(@RequestParam String bloodType) {
        List<Donor> donors = donorService.searchDonorsByBloodType(bloodType);
        return ResponseEntity.ok(donors);
    }
}
// UserService.java
@Service
public class UserService {
    // Implement methods for user registration and authentication
}

// DonorService.java
@Service
public class DonorService {
    // Implement methods for donor registration and search
}
// JwtRequestFilter.java
@Component
public class JwtRequestFilter extends OncePerRequestFilter {
    @Autowired
    private UserService userService;

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {
        final String authorizationHeader = request.getHeader("Authorization");

        String username = null;
        String jwt = null;

        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            jwt = authorizationHeader.substring(7);
            username = jwtUtil.extractUsername(jwt);
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = userService.loadUserByUsername(username);

            if (jwtUtil.validateToken(jwt, userDetails)) {
                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities());

                usernamePasswordAuthenticationToken
                        .setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
            }
        }
        chain.doFilter(request, response);
    }
}
